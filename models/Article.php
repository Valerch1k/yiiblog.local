<?php

namespace app\models;

use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "article".
 *
 * @property integer $id
 * @property string $title
 * @property string $description
 * @property string $content
 * @property string $date
 * @property string $image
 * @property integer $viewed
 * @property integer $user_id
 * @property integer $status
 * @property integer $category_id
 *
 * @property ArticleTag[] $articleTags
 * @property Comment[] $comments
 */
class Article extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'article';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title'],'required'],
            [['title','description','content'],'string'],
            [['date'],'date','format'=>'php:Y-m-d'],
            [['date'],'default','value'=>date('Y-m-d')],
            [['title'],'string','max'=>255]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Заголовок',
            'description' => 'Краткое описание',
            'content' => 'Контент',
            'date' => 'Дата создания',
            'image' => 'Картинка',
            'viewed' => 'Просмотров',
            'user_id' => 'User ID',
            'status' => 'Статус',
            'category_id' => 'Category ID',
            'IsNew'=>'Новые статьи',
            'IsPopular'=>'Популярные'
        ];
    }

    public function saveImage($filename)
    {
        $this->image = $filename;

        return $this->save(false);
    }

    public function deleteImage()
    {
        $imageUploadModel = new ImageUpload();
        $imageUploadModel->deleteCurrentImage($this->image);
    }

    public function getImage()
    {
        if($this->image)
        {
            return '/uploads/' . $this->image;
        }
        else
        {
            return '/no-image.png';
        }
    }

    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public  function  saveCategory($category_id)
    {
        // находим обьект  по id
        $category = Category::findOne($category_id);
        // связываем модели article and category  по category_id
        if($category != null) {
            $this->link('category',$category);
            return true;
        } else {
            return false;
        }
    }

    /**
     * @param $tags_id
     */
    public  function saveTags($tags)
    {
        if(is_array($tags))
        {
            ArticleTag::deleteAll(['article_id'=>$this->id]);
            foreach ($tags as $tag_id)
            {
                $tag = \app\models\Tag::findOne($tag_id);
                $this->link('tags',$tag);
            }
        }
    }

    public function getDate()
    {
        Yii::$app->formatter->locale = 'ru-RU';
        return Yii::$app->formatter->asDate($this->date); // выведет: 1 января 2014 г.
    }

    public function getCountComment()
    {
        return $this->getComment()->count();
    }


    public function getCategory()
    {
        return $this->hasOne(Category::className(), ['id' => 'category_id']);
    }

    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    public function getComment()
    {
        return $this->hasMany(Comment::className(), ['article_id' => 'id']);
    }

    public function getTags()
    {
        return $this->hasMany(\app\models\Tag::className(), ['id' => 'tag_id'])
            ->viaTable('article_tag', ['article_id' => 'id']);
    }

    public  function getSelectedTags()
    {
        $selectedTags = $this->getTags()->select('id')->asArray()->all();

        return ArrayHelper::getColumn($selectedTags,'id');
    }


}
